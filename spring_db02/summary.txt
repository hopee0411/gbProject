Spring Legacy Project > spring_db01

package : com.jip.db1

스프링과 DB 연동 처리
회원 관리(가입, 로그인 처리 등, 회원 정보 수정 등등)
 - MVC 패턴과 DB 연동 처리
 

필요 라이브러리(pom.xml에 추가 필요)
1. ojdbc6 (오라클 접속용 드라이버)
2. spring-jdbc
3. spring-tx(트랜잭션 처리용 라이브러리)
4. commons-dbcp2(커넥션 풀 라이브러리)
5. log4jdbc-remix(DB 실행 로그 라이브러리)
6. mybatis(xml로 메소드 없이 sql문장을 실행하는 api)
7. mybatis-spring
<기타>
8. logback-classic(DB 실행 로그 처리 라이브러리)
   -> 기본 log4j를 변경.
9. lombok 

-> maven repository 사이트에서 검색.


프로젝트 단위테스트용 라이브러리
1. junit
2. spring-test



Spring에서 DB 연동 작업
1. 해당 라이브러리를 pom.xml에 추가
2. context.xml에 DB 작업을 위한 설정을 추가
	(해당 과정 처리 객체(bean) 설정)
	-> root-context.xml에 처리


Mybatis
  Spring에서 관계형 DB를 활용하는 작업을 간편하게 하도록 돕는 프레임워크.
  자바코드로 해당 작업을 위한 메소드의 선언부만 작성하고(즉, 인터페이스를 쓴다.)
  SQL 구문은 xml 문서(mapper)에 작성하여 소스코드와 SQL을 분리함.
  장점. 작성하는 소스코드의 양이 매우 적고, SQL 쿼리의 수정이 용이하다.
  
  교재 p.89~, p.292~

  어노테이션을 사용하여 인터페이스에 직접 SQL문장을 작성하는 방법도 있음.
  
  SQLSessionFactory : 내부적으로 DB 연결 및 SQL 문장을 실행하는 객체
  		접속 -> SQL 실행 -> 실행결과 리턴
  		: bean으로 스프링 컨테이너에 등록하여 사용.


Mybatis mapper 관련 규칙
1. Mybatis mapper를 작성하기 위한 문서타입(DTD) 문장 입력
   DTD : Document Type Definition의 약자 
   		xml 문서 구조 및 해당 문서에서 사용하는 요소와 속성을 정의.
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

2. <mapper> 태그
	주요 속성 - namespace : 자바의 interface와 연결.
			interface 작성 시 패키지까지 모두 입력.
3. SQL 쿼리와 같은 태그로 실행문을 작성
	삽입작업 - <insert> 태그 사용
	수정작업 - <update> 태그 사용
	삭제작업 - <delete> 태그 사용
	검색작업 - <select> 태그 사용

4. 작업용 태그의 속성
   id - interface의 메소드 이름을 입력(철자, 대소문자 모두 동일!)
   parameterType - 메소드의 파라미터에 해당하는 변수의 타입을 작성.
		파라미터가 객체(ex. DTO)라면 패키지까지 모두 입력
   resultType - 메소드의 리턴 타입에 해당하는 키워드 입력 

5. mapper 작성 규칙
  1) parameterType은 1개의 타입만 작성.
  	 메소드의 파라미터가 여러개일 경우 parameterType을 생략한다.(좋지않음!)
  2) parameterType이 변수(int, float, String 등)라면 : #{변수명}
  3) parameterType이 DTO라면 : #{필드명}
  4) 파라미터가 여러개일 경우 Map<key, value> 사용 : #{key}
  5) resultType에 결과값이 1개인 것으로 가정하여 type을 설정.
  		결과가 ArrayList<DTO> 라면 resutlType="DTO"로 작성.
  		resultType에 ArrayList는 사용하지 않는다.
  	 

회원 관리를 위한 Dao 작업.
1) 회원가입 처리(insert)
2) 로그인 처리 - 입력한 id로 DB 테이블 검색을 수행
		결과가 존재하면 가입한 사용자, 없으면 가입하지 않았거나 잘못입력했거나..
		id로 테이블 검색을 수행하여 해당 id에 대한 password를 구한다.
		구한 password와 입력한 password를 비교하여 맞으면 로그인 처리,
		틀리면 비밀번호 오류로 메시지를 보여준다.


Spring Framework의 component
  component는 스프링에서 골격을 이루는 주요 요소.
  controller와 service는 component.
  @Component 어노테이션(컴포넌트 클래스임을 지정)
  컨트롤러용 어노테이션 : @Controller
  서비스용 어노테이션 : @Service
  
  컨트롤러와 서비스는 component-scan의 대상이 되며
  스프링이 동작을 시작할 때 빈으로 자동 생성한다.


RedirectAttributes
  리다이렉트(페이지 전환)로 데이터 전달이 용이하지 않음.
  (목적지인 jsp 페이지로 데이터 전달이 안된다.)
  session에 데이터를 저장하면 목적지 jsp 전달이 가능.
  session에 저장된 데이터는 삭제하지 않으면 접속이 종료될 때까지
  유지가 됨. 한번 쓰고 버리는 단편적인 메시지 전송에 적합하지 않음.
  
  RedirectAttributes는 목적 페이지(jsp)에 도달할 때까지만 유지되고
  이 후 '새로고침'을 하거나 페이지가 변경되는 자동으로 제거됨.
  1회성 간단한 메시지 전송에 적합한 객체.
  
  사용 용도 : 회원 가입의 경우 가입 실패 메시지 전달.
  			로그인 실패 메시지 전달.
  

수정 작업용 페이지 작성 시 참고사항
	수정 페이지 = 삽입 페이지
	각각의 input 태그에 value 속성이 있느냐 없느냐의 차이.
	페이지 출력 전에 DB에서 정보를 가져오는 작업과 페이지에 정보를 포함시키는 작업이 필요하다.
	
	(id의 경우)
	수정이 불가능 하도록 지정할 경우 hidden type을 사용하여
	보여주지 않던가, 보여는 주되 변경은 불가능하도록
	readonly 속성을 지정한다.






21.06.14
회원 정보 수정 및 회원 탈퇴 처리
1. 정보 수정
  입력 양식에 기존 정보를 출력하고, 수정 항목에 상관 없이 모든 항목에 대해서 UPDATE를 수행.
  
  1) 수정양식 페이지로 이동
  main.jap -> controller -> service(getMEmberInfo)
  -> dao -> db -> dao -> service -> controller -> 수정양식페이지
  
  2) 수정 처리
  수정양식 페이지 -> controller -> service -> dao 
  -> db -> dao -> service -> redirect:main -> controller -> main.jap
  
2. 회원 탈퇴
  id를 기반으로 DB DELETE 및 로그아웃 처리.
  
  < 과정 >
  main.jsp -> controller -> service -> dao 
  -> db -> dao -> service -> redirect:logout -> home.jsp












































